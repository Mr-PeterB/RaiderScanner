#!/bin/bash

#colors
red="\e[31m"
blue="\e[34m"
black="\e[30m"
cyan="\e[36m"
white="\e[97m"
pink="\e[95m"
green="\e[32m"
yellow="\e[33m"
gray="\e[90m"
endc="\e[0m"


#light colors
lred="\e[91m"
lyellow="\e[93m"
lgreen="\e[92m"
lblue="\e[94m"

#bold colors
bred="\e[1m\e[31m"

#underline colors
uwhite="\e[4m\e[97m"
ured="\e[4m\e[31m"
ulred="\e[4m\e[91m"
uyellow="\e[4m\e[33m"
ublue="\e[4m\e[34m"
ulyellow="\e[4m\e[93m"
ugreen="\e[4m\e[32m"
ulgreen="\e[4m\e[92m"


#General Variables
program_name=$0
hosts_flag=0
disc_flag=0
tcp_flag=0
udp_flag=0
restore_flag=0
exit_flag=0
all_down=true
total_ports=""

help () {

echo -e "
USAGE:

        raider [options]

OPTIONS:
        Host Discovery:
        -d, --discovery Find alive hosts on several subnets.
                        (Read a text file with the subnets in it
                         Format: 10.0.1.0/24
                                 192.168.1.0/24
                                 10.11.55.0/24)
        Port Scanning:
        -f, --file      The file with hosts (one by one in line)
        -t, --tcp       Use tcp scans
        -u, --udp       Use udp scans
        -r, --restore   Restore the previous session
        -h, --help      Help Menu

EXAMPLES:
$program_name -d subnets.txt
$program_name -r
$program_name  -f hostses.txt -t
$program_name -f hostes -t -u
"
exit 1
}



if [[ -z  $1 ]]
then
        help
fi

flags () {
    while [ $# -gt 0 ]
    do
        case "$1" in
        -d|--discovery)
            disc_flag=1
            disc_file=$2
            shift
            shift
            ;;
        -f|--file)
            hosts_flag=1
            hosts_file=$2
            shift
            shift
            ;;
        -t|--tcp)
            tcp_flag=1
            shift
            ;;
        -u|--udp)
            udp_flag=1
            shift
            ;;
        -r|--restore)
            restore_flag=1
            shift
            ;;
        -h|--help|*)
            help
            ;;
        "")
          help
          ;;
        esac


    done
}



version () {

echo -e "${blue}
██████╗  █████╗ ██╗██████╗ ███████╗██████╗     ███████╗ ██████╗ █████╗ ███╗   ██╗███╗   ██╗███████╗██████╗
██╔══██╗██╔══██╗██║██╔══██╗██╔════╝██╔══██╗    ██╔════╝██╔════╝██╔══██╗████╗  ██║████╗  ██║██╔════╝██╔══██╗
██████╔╝███████║██║██║  ██║█████╗  ██████╔╝    ███████╗██║     ███████║██╔██╗ ██║██╔██╗ ██║█████╗  ██████╔╝
██╔══██╗██╔══██║██║██║  ██║██╔══╝  ██╔══██╗    ╚════██║██║     ██╔══██║██║╚██╗██║██║╚██╗██║██╔══╝  ██╔══██╗
██║  ██║██║  ██║██║██████╔╝███████╗██║  ██║    ███████║╚██████╗██║  ██║██║ ╚████║██║ ╚████║███████╗██║  ██║
╚═╝  ╚═╝╚═╝  ╚═╝╚═╝╚═════╝ ╚══════╝╚═╝  ╚═╝    ╚══════╝ ╚═════╝╚═╝  ╚═╝╚═╝  ╚═══╝╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝${fcyan}
                                                                                                ____    __   
                                                                                         __   _|___ \  / /_  
                                                                                         \ \ / / __) || '_ \ 
                                                                                          \ V / / __/ | (_) |
                                                                                           \_/ |_____(_)___/ 
                     
${red}
                                        ⠀⠀⠀⠀⠀⠀⠀⣠⣤⡀⠀⠀⢀⣤⣀⠀⠀⠀⠀⠀⠀⠀
                                        ⠀⠀⠀⠀⠀⣠⣾⣿⡿⠁⠀⠀⠈⢿⣿⣷⣄⠀⠀⠀⠀⠀
                                        ⠀⠀⠀⢠⣾⣿⣿⡿⠀⠀⠀⠀⠀⠈⣿⣿⣿⣧⡀⠀⠀⠀
                                        ⠀⠀⣰⣿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⡄⠀⠀
                                        ⠀⣴⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⡄⠀
                                        ⢠⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⠀
                                        ⣾⣿⣿⣿⣿⣿⠇⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣿⣿⣿⣿⡇
                                        ⣿⣿⣿⣿⠟⠁⢀⡀⠀⠀⠀⠀⠀⠀⢀⡀⠈⠻⣿⣿⣿⣿
                                        ⣿⣿⠟⠁⢀⣴⣿⣷⡀⠀⣴⣦⠀⢀⣾⣿⣦⡀⠈⠻⣿⣿
                                        ⠟⠁⠀⣰⣿⣿⣿⣿⣿⣿⡇⢸⣿⣿⣿⣿⣿⣿⣆⠀⠈⠻
                                        ⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣧⣼⣿⣿⣿⣿⣿⣿⣿⣷⣄⠀
                                        ⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃
                                        ⠀⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀
                                        ⠀⠘⣿⣿⣿⣿⣿⡟⠀⠈⣿⣿⠁⠀⣿⣿⣿⣿⣿⡿⠁⠀
                                        ⠀⠀⠈⠻⠿⠿⠟⠁⠀⠀⠹⠏⠀⠀⠈⠻⠿⠿⠟⠁⠀⠀
${endc}"
sleep 2
# ANSI Shadow
# https://patorjk.com/software/taag/#p=display&h=2&v=3&f=Standard&t=v2.6
}




DeadOrAlive () {

while read -r subs
do
        echo -e "\n${lblue}-------- Scanning subnet $subs ----------${endc}\n"

        name=${subs/\//_}
        mkdir $name
        nmap -n -PR -PS80,443 -PA3389 -PU53,161,123 -oA $name/livehosts_1_$name $subs
        nmap -n -sn -PO -oA $name/livehosts_2_$name $subs
        nmap -n -sn -PP -oA $name/livehosts_3_$name $subs
        nmap -n -sn -PM -oA $name/livehosts_4_$name $subs
        nmap -n -sn -PE -oA $name/livehosts_5_$name $subs
        nmap -n -sn -PU -oA $name/livehosts_6_$name $subs
        fping -agq $subs | tee -a $name/fping_results_$name.txt

        grep "Up" $name/livehosts_1_$name.gnmap| awk '{print$ 2}' >> $name/tmp
        grep "Up" $name/livehosts_2_$name.gnmap| awk '{print$ 2}' >> $name/tmp
        grep "Up" $name/livehosts_3_$name.gnmap| awk '{print$ 2}' >> $name/tmp
        grep "Up" $name/livehosts_4_$name.gnmap| awk '{print$ 2}' >> $name/tmp
        grep "Up" $name/livehosts_5_$name.gnmap| awk '{print$ 2}' >> $name/tmp
        grep "Up" $name/livehosts_6_$name.gnmap| awk '{print$ 2}' >> $name/tmp


        cat $name/fping_results_$name.txt >> $name/tmp

        cat $name/tmp | sort -u > $name/all_live_hosts_$name.txt
        rm $name/tmp
        cat $name/all_live_hosts_$name.txt >> all_live_hosts.txt
        cat all_live_hosts.txt | sort -u > .tmp
        cat .tmp > all_live_hosts.txt
        rm .tmp
        alive=`wc -l < $name/all_live_hosts_$name.txt`
        echo -e "\n${green}[+]${endc} Alive hosts: ${green}$alive${endc} (file: \"$name/all_live_hosts_$name.txt\")"
done < $disc_file

alive=`wc -l < all_live_hosts.txt`

echo -e "\n${lblue}[*] ${endc}Total alive hosts: $alive (file: \"all_live_hosts.txt\")"

}

tcp_scan () {

if [ $hosts_file = ".restore_tcp_raider" ]
then
        backup_file=".restore_tcp_raider2"
else
        backup_file=".restore_tcp_raider"
fi

echo -e "${lblue}[*] ${endc}Using file = $hosts_file"
echo -e "${lblue}[*] ${endc}Backup file = $backup_file"
echo -e "\n"
cat $hosts_file > $backup_file

while read -r host
do
        echo -e "${blue}\n---------------------------------------------$host--------------------------------------------------------\n${endc}"
        mkdir -p $host/tcp

        nmap -vv -p- -sS -Pn -n --open --defeat-rst-ratelimit --max-retries 3 --host-timeout 90m -oA $host/tcp/all_tcp_ports $host

        ports=`awk '/ open / && /tcp/ {print $1}' $host/tcp/all_tcp_ports.nmap | awk -F "/" '{printf "%s,",$1}' | sed 's/.$//'`

        if [ -n "$ports" ];then

                all_down=false
                nmap -sV -Pn -p$ports -oA $host/tcp/full_tcp_scan $host
                nmap -p$ports -Pn --script "(default or vuln or version) and safe" -oA $host/tcp/safe_scripts $host
                #nmap -p$ports -Pn --script "(default or vuln or version or external or discovery) and safe" -oA $host/tcp/safe_scripts $host
                #nmap -A -p$ports -oA $host/tcp/aggressive_tcp_scan $host
                #nmap --script "(vuln and safe)" -Pn -p$ports -oA $host/tcp/script_vuln $host

                #add all the nmaps you want!!
                awk '/ open / && /tcp/ {print $1}' $host/tcp/all_tcp_ports.nmap | awk -F "/" '{print $1}' >> .nessus_tcp_ports
                echo -e $host >> .nessus_hosts
        else
                echo -e $host >> .no_open_tcp_ports
        fi

        grep -vw "$host" $backup_file > .tmp
        cat .tmp > $backup_file
        rm .tmp



done < $hosts_file


nessus_ports=`cat .nessus_tcp_ports | sort -un | awk '{printf "%s,",$1}' | sed 's/.$//'`
nessus_hosts=`cat .nessus_hosts | sort -u | awk '{printf "%s,",$1}' | sed 's/.$//'`
no_open_tcp_ports=`cat .no_open_tcp_ports | sort -u | awk '{printf "%s,",$1}' | sed 's/.$//'`
rm .restore_tcp_raider .restore_tcp_raider2 .nessus_tcp_ports .no_open_tcp_ports .nessus_hosts 2>/dev/null

echo -e "\n\n${blue}
------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------${endc}"

echo -e "\n${blue}[*]${endc} TCP Hosts for nessus -> $nessus_hosts"
echo -e "${blue}[*]${endc} TCP Ports for nessus -> $nessus_ports"
echo -e "${red}[-]${endc} No open ports -> $no_open_tcp_ports\n"

sleep 2

}

udp_scan () {

echo -e "${cyan}\n-----------------------------------------------UDP Scan--------------------------------------------------------${endc}"


if [ $hosts_file = ".restore_udp_raider" ]
then
        backup_file=".restore_udp_raider2"
else
        backup_file=".restore_udp_raider"
fi

echo -e "\n${lblue}[*] ${endc}Using file = $hosts_file"
echo -e "${lblue}[*] ${endc}Backup file = $backup_file"
cat $hosts_file > $backup_file

while read -r host
do
        echo -e "${blue}\n---------------------------------------------$host--------------------------------------------------------\n${endc}"
        mkdir -p $host/udp

        nmap -sUV -Pn --top-ports 1000 --open --defeat-icmp-ratelimit --defeat-rst-ratelimit --max-retries 2 $host -oA $host/udp/top1000_udp_ports
        #portsudp=`awk '/ open / && /udp/ {print $1}' $host/udp/all_udp_ports.nmap | awk -F "/" '{printf "%s,",$1}' | sed 's/.$//'`

        #if [ -n "$portsudp" ];then

        #        all_down=false
        #        nmap -sUV -Pn -p$portsudp $host -oA $host/udp/full_udp

               #add all the nmaps you want!!
        #fi


        grep -vw "$host" $backup_file > .tmp
        cat .tmp > $backup_file
        rm .tmp
        echo -e $host >> .nessus_udp_hosts
        awk '/ open / && /udp/ {print $1}' $host/udp/all_udp_ports.nmap |  awk -F "/" '{print $1}' >> .nessus_udp_ports

done < $hosts_file

nessus_udp_ports=`cat .nessus_udp_ports | sort -un | awk '{printf "%s,",$1}' | sed 's/.$//'`
nessus_udp_hosts=`cat .nessus_udp_hosts | sort -u | awk '{printf "%s,",$1}' | sed 's/.$//'`

rm .restore_udp_raider .restore_udp_raider2 .nessus_udp_ports .nessus_udp_hosts 2>/dev/null

echo -e "\n\n${blue}
------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------${endc}"


if [ -n $nessus_udp_ports ]
then
        echo -e "\n${red}[-]${endc} No Open UDP Ports for nessus"
        echo -e "${blue}[*]${endc} IPs Scanned -> $nessus_udp_hosts\n"
       
else
        echo -e "\n${blue}[*]${endc} UDP Hosts for nessus -> $nessus_udp_hosts"
        echo -e "${blue}[*]${endc} UDP Ports for nessus -> $nessus_udp_ports\n"
fi

}





#main()

if [[ $EUID -ne 0 ]]; then
        echo -e "${red}[-] ${endc}Please run this script as root." 1>&2
        exit 1
fi


version

flags "$@"

if [ "$disc_flag" != 0 ]
then
        if [ "$disc_flag" != 0 ]
        then
                if [ -f "$disc_file" ]
                then
                        DeadOrAlive
                        exit 0
                else
                         echo -e "\n${red}[-] ${endc}The file \"$disc_file\" does not exist."
                fi
        fi

elif [ "$hosts_flag" != 0 ]
then
        if [ -f "$hosts_file" ]
        then


                if [ "$tcp_flag" != 0 ]
                then
                        rm .restore_tcp_raider .restore_tcp_raider2 2>/dev/null
                        tcp_scan
                fi

                if [ "$udp_flag" != 0 ]
                then
                        rm .restore_udp_raider .restore_udp_raider2 2>/dev/null
                        udp_scan
                fi

        else
                echo -e "\n${red}[-] ${endc}The file \"$hosts_file\" does not exist."

        fi
elif [ "$restore_flag" != 0 ]
then
        #tcp
        if [ -f ".restore_tcp_raider2" ]
        then
                if [ -f ".restore_tcp_raider" ]
                then
                        if [ `cat .restore_tcp_raider | wc -l` -gt `cat .restore_tcp_raider2 | wc -l` ]
                        then
                                hosts_file=".restore_tcp_raider2"
                                tcp_scan
                        else
                                hosts_file=".restore_tcp_raider"
                                tcp_scan
                        fi
                else
                        hosts_file=".restore_tcp_raider2"
                        tcp_scan                     
                fi
        elif [ -f ".restore_tcp_raider" ]
        then
                hosts_file=".restore_tcp_raider"
                tcp_scan
        else
                echo -e "\n${red}[-] ${endc}The tcp restore file does not exist."
        fi

        #udp
        if [ -f ".restore_udp_raider2" ]
        then
                if [ -f ".restore_udp_raider" ]
                then
                        if [ `cat .restore_udp_raider | wc -l` -gt `cat .restore_udp_raider2 | wc -l` ]
                        then
                                hosts_file=".restore_udp_raider2"
                                udp_scan
                        else
                                hosts_file=".restore_udp_raider"
                                udp_scan
                        fi
                else
                        hosts_file=".restore_udp_raider2"
                        udp_scan                     
                fi
        elif [ -f ".restore_udp_raider" ]
        then
                hosts_file=".restore_udp_raider"
                udp_scan
        else
                echo -e "\n${red}[-] ${endc}The udp restore file does not exist."
        fi

else
        help
fi



if $all_down ; then
        echo -e "${red}
-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------${endc}"
        exit 0
fi

filtered_ports=`grep 'due to host timeout' */tcp/all_tcp_ports.nmap -h | awk '{printf "%s, ",$3}'  | sed 's/..$//'`

if [[ -n $filtered_ports ]]
then
        echo -e "\n${red}[!]${endc} ${uwhite}Propably Firewall Blocking Us${endc} -> $filtered_ports\n\n"
fi


#Banners Info
# https://manytools.org/hacker-tools/ascii-banner/
#Colors
#https://dev.to/ifenna__/adding-colors-to-bash-scripts-48g4
