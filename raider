#!/bin/bash

#colors
red="\e[31m"
blue="\e[34m"
black="\e[30m"
cyan="\e[36m"
white="\e[97m"
pink="\e[95m"
green="\e[32m"
yellow="\e[33m"
gray="\e[90m"
endc="\e[0m"


#light colors
lred="\e[91m"
lyellow="\e[93m"
lgreen="\e[92m"
lblue="\e[94m"

#bold colors
bred="\e[1m\e[31m"

#underline colors
uwhite="\e[4m\e[97m"
ured="\e[4m\e[31m"
ulred="\e[4m\e[91m"
uyellow="\e[4m\e[33m"
ublue="\e[4m\e[34m"
ulyellow="\e[4m\e[93m"
ugreen="\e[4m\e[32m"
ulgreen="\e[4m\e[92m"


#General Variables
program_name=$0
hosts_flag=0
tcp_flag=0
udp_flag=0
restore_flag=0
exit_flag=0
all_down=true

help () {

echo -e "
USAGE:

        raider [options]

OPTIONS:
        -f, --file      The file with hosts
        -t, --tcp       Use tcp scans
        -u, --udp       Use udp scans
        -r, --restore   Restore the previous session
        -h, --help      Help Menu

EXAMPLES:
$program_name -r
$program_name  -f hostses.txt -t
$program_name -f hostes -t -u
"
exit 1
}



if [[ -z  $1 ]]
then
        help
fi

flags () {
    while [ $# -gt 0 ]
    do
        case "$1" in
        -f|--file)
            hosts_flag=1
            hosts_file=$2
            shift
            shift
            ;;
        -t|--tcp)
            tcp_flag=1
            shift
            ;;
        -u|--udp)
            udp_flag=1
            shift
            ;;
        -r|--restore)
            restore_flag=1
            shift
            ;;  
        -h|--help|*)
            help
            ;;
        "")
          help
          ;;   
        esac


    done
}  



version () {

echo -e "${blue}
██████╗  █████╗ ██╗██████╗ ███████╗██████╗     ███████╗ ██████╗ █████╗ ███╗   ██╗███╗   ██╗███████╗██████╗ 
██╔══██╗██╔══██╗██║██╔══██╗██╔════╝██╔══██╗    ██╔════╝██╔════╝██╔══██╗████╗  ██║████╗  ██║██╔════╝██╔══██╗
██████╔╝███████║██║██║  ██║█████╗  ██████╔╝    ███████╗██║     ███████║██╔██╗ ██║██╔██╗ ██║█████╗  ██████╔╝
██╔══██╗██╔══██║██║██║  ██║██╔══╝  ██╔══██╗    ╚════██║██║     ██╔══██║██║╚██╗██║██║╚██╗██║██╔══╝  ██╔══██╗
██║  ██║██║  ██║██║██████╔╝███████╗██║  ██║    ███████║╚██████╗██║  ██║██║ ╚████║██║ ╚████║███████╗██║  ██║
╚═╝  ╚═╝╚═╝  ╚═╝╚═╝╚═════╝ ╚══════╝╚═╝  ╚═╝    ╚══════╝ ╚═════╝╚═╝  ╚═╝╚═╝  ╚═══╝╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝${fcyan}
                                                                                         ____    _ 
                                                                                  __   _|___ \  / |
                                                                                  \ \ / / __) | | |
                                                                                   \ V / / __/ _| |
                                                                                    \_/ |_____(_)_|
                   
${red}                                                                                                                                                  
                                                                                                 
                                        ⠀⠀⠀⠀⠀⠀⠀⣠⣤⡀⠀⠀⢀⣤⣀⠀⠀⠀⠀⠀⠀⠀
                                        ⠀⠀⠀⠀⠀⣠⣾⣿⡿⠁⠀⠀⠈⢿⣿⣷⣄⠀⠀⠀⠀⠀
                                        ⠀⠀⠀⢠⣾⣿⣿⡿⠀⠀⠀⠀⠀⠈⣿⣿⣿⣧⡀⠀⠀⠀
                                        ⠀⠀⣰⣿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⡄⠀⠀
                                        ⠀⣴⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⡄⠀
                                        ⢠⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⠀
                                        ⣾⣿⣿⣿⣿⣿⠇⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣿⣿⣿⣿⡇
                                        ⣿⣿⣿⣿⠟⠁⢀⡀⠀⠀⠀⠀⠀⠀⢀⡀⠈⠻⣿⣿⣿⣿
                                        ⣿⣿⠟⠁⢀⣴⣿⣷⡀⠀⣴⣦⠀⢀⣾⣿⣦⡀⠈⠻⣿⣿
                                        ⠟⠁⠀⣰⣿⣿⣿⣿⣿⣿⡇⢸⣿⣿⣿⣿⣿⣿⣆⠀⠈⠻
                                        ⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣧⣼⣿⣿⣿⣿⣿⣿⣿⣷⣄⠀
                                        ⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃
                                        ⠀⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀
                                        ⠀⠘⣿⣿⣿⣿⣿⡟⠀⠈⣿⣿⠁⠀⣿⣿⣿⣿⣿⡿⠁⠀
                                        ⠀⠀⠈⠻⠿⠿⠟⠁⠀⠀⠹⠏⠀⠀⠈⠻⠿⠿⠟⠁⠀⠀
${endc}"
sleep 2
# ANSI Shadow
# https://patorjk.com/software/taag/#p=display&h=2&v=3&f=Standard&t=v2.1
}






tcp_scan () {

if [ $hosts_file = ".restore_tcp_raider" ]
then
        backup_file=".restore_tcp_raider2"
else
        backup_file=".restore_tcp_raider"
fi
echo $backup_file
echo -e "\n\n"
cat $hosts_file > $backup_file

while read -r host
do
        echo -e "${blue}\n---------------------------------------------$host--------------------------------------------------------\n${endc}"
        mkdir -p $host/tcp
        
        nmap -vv -p- -Pn -sS --open -oA $host/tcp/all_tcp_ports $host
        
        ports=`awk '/ open / && /tcp/ {print $1}' $host/tcp/all_tcp_ports.nmap | awk -F "/" '{printf "%s,",$1}' | sed 's/.$//'`

        if [ -n "$ports" ];then

                all_down=false
                nmap -sV -Pn -p$ports -oA $host/tcp/full_tcp_scan $host
                nmap -p$ports -Pn --script "(default or vuln or version or external or discovery) and safe" -oA $host/tcp/safe_scripts $host
                #nmap -A -p$ports -oA $host/tcp/aggressive_tcp_scan $host
                #nmap --script vuln -Pn -p$ports -oA $host/tcp/script_vuln $host

                #add all the nmaps you want!!
        fi

        grep -vw "$host" $backup_file > .tmp 
        cat .tmp > $backup_file
        rm .tmp

done < $hosts_file

rm $backup_file

}

udp_scan () {

if [ $hosts_file = ".restore_udp_raider" ]
then
        backup_file=".restore_udp_raider2"
else
        backup_file=".restore_udp_raider"
fi

echo -e "\n\n"
cat $hosts_file > $backup_file

while read -r host
do
        echo -e "${blue}\n---------------------------------------------$host--------------------------------------------------------\n${endc}"
        mkdir -p $host/udp

        nmap -vv -p- -sU -Pn T5 $host -oA $host/udp/all_udp_ports
        portsudp=`awk '/ open / && /udp/ {print $1}' $host/udp/all_udp_ports.nmap | awk -F "/" '{printf "%s,",$1}' | sed 's/.$//'`

        if [ -n "$portsudp" ];then

                all_down=false
                nmap -sU -Pn -p$portsudp $host -oA $host/udp/full_udp

                #add all the nmaps you want!!
        fi


        grep -vw "$host" $backup_file > .tmp 
        cat .tmp > $backup_file
        rm .tmp

done < $hosts_file

rm $backup_file

}





#main()

if [[ $EUID -ne 0 ]]; then
        echo -e "${red}Please run this script as root." 1>&2
        exit 1
fi


version

flags "$@"

if [ "$hosts_flag" != 0 ]
then
        if [ -f "$hosts_file" ]
        then


                if [ "$tcp_flag" != 0 ]
                then
                        tcp_scan
                fi

                if [ "$udp_flag" != 0 ]
                then
                        udp_flag
                fi

        else
                echo -e "${red}\nThe file \"$hosts_file\" does not exist."

        fi
elif [ "$restore_flag" != 0 ]
then
        if [ -f ".restore_tcp_raider" ]
        then
                if [ -n ".restore_tcp_raider" ]
                then
                        hosts_file=".restore_tcp_raider"
                        tcp_scan
                else
                        echo -e "${red}\nThe tcp restore file is empty.${endc}"
                fi
        else
                echo -e "${red}\nThe tcp restore file does not exist.${endc}"
        fi

        if [ -f ".restore_udp_raider" ]
        then
                if [ -n ".restore_udp_raider" ]
                then
                        hosts_file=".restore_udp_raider"
                        udp_scan
                else
                        echo -e "${red}\nThe udp restore file is empty.${endc}"
                fi
        else
                echo -e "${red}\nThe udp restore file does not exist.${endc}"
        fi

else
        help
fi



if $all_down ; then
        echo -e "${red}-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------${endc}"
        exit 0
fi


echo -e "\n\n${green}

                ███████╗██╗███╗   ██╗██╗███████╗██╗  ██╗███████╗██████╗ ██╗██╗
                ██╔════╝██║████╗  ██║██║██╔════╝██║  ██║██╔════╝██╔══██╗██║██║
                █████╗  ██║██╔██╗ ██║██║███████╗███████║█████╗  ██║  ██║██║██║
                ██╔══╝  ██║██║╚██╗██║██║╚════██║██╔══██║██╔══╝  ██║  ██║╚═╝╚═╝
                ██║     ██║██║ ╚████║██║███████║██║  ██║███████╗██████╔╝██╗██╗
                ╚═╝     ╚═╝╚═╝  ╚═══╝╚═╝╚══════╝╚═╝  ╚═╝╚══════╝╚═════╝ ╚═╝╚═╝${endc}
"

   

#Banners Info
# https://manytools.org/hacker-tools/ascii-banner/
#Colors
#https://dev.to/ifenna__/adding-colors-to-bash-scripts-48g4
